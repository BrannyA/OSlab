#include "asm.h"
#define TIMER_INTERVAL 10000000

.equ    KERNEL, 0
.equ    USER,   156

.macro STI
    mfc0    k0, CP0_STATUS
    nop
    li      k1, (STATUS_CU0 | STATUS_IE)
    or      k0, k1
    mtc0    k0, CP0_STATUS
    nop
.endm

.macro CLI
    mfc0    k0, CP0_STATUS
    nop
    li      k1, (STATUS_CU0 | STATUS_IE)
    or      k0, k1
    xori    k0, STATUS_IE
    mtc0    k0, CP0_STATUS
    nop
.endm

LEAF(asm_start)
    mtc0    zero, CP0_STATUS
    mtc0    zero, CP0_WATCHLO
    mtc0    zero, CP0_WATCHHI

    mfc0    t0, CP0_CONFIG
    and     t0, ~0x7
    ori     t0, 0x2
    mtc0    t0, CP0_CONFIG
    
    jr  ra
END(asm_start)

.macro SAVE_CONTEXT offset
    #lui     v0,0xa080
    #addiu   a0,v0,10520
    #jal     0xa0801e34
    #nop
    lw      k0, current_running
    addi    k0, k0, \offset
    #sw     $0, OFFSET_REG0(k0)
    sw		$1, 4(k0)
    sw      v0, 8(k0)
    sw      v1, 12(k0)
    sw      a0, 16(k0)
    sw      a1, 20(k0)
    sw      a2, 24(k0)
    sw      a3, 28(k0)
    sw      t0, 32(k0)
    sw      t1, 36(k0)
    sw      t2, 40(k0)
    sw      t3, 44(k0)
    sw      t4, 48(k0)
    sw      t5, 52(k0)
    sw      t6, 56(k0)
    sw      t7, 60(k0)
    sw      s0, 64(k0)
    sw      s1, 68(k0)
    sw      s2, 72(k0)
    sw      s3, 76(k0)
    sw      s4, 80(k0)
    sw      s5, 84(k0)
    sw      s6, 88(k0)
    sw      s7, 92(k0)
    sw      t8, 96(k0)
    sw      t9, 100(k0)
    #sw      k0, 104(k0)
    #sw      k1, 108(k0)
    sw      gp, 112(k0)
    sw      sp, 116(k0)
    sw      fp, 120(k0)
    sw      ra, 124(k0)
    
    mfc0    k1, CP0_STATUS
    nop
    sw      k1, OFFSET_STATUS(k0)
    mfc0    k1, CP0_TAGHI
    nop
    sw      k1, OFFSET_HI(k0)
    mfc0    k1, CP0_TAGLO
    nop
    sw      k1, OFFSET_LO(k0)
    mfc0    k1, CP0_BADVADDR
    nop
    sw      k1, OFFSET_BADVADDR(k0)
    mfc0    k1, CP0_CAUSE
    nop
    sw      k1, OFFSET_CAUSE(k0)
    mfc0    k1, CP0_EPC
    nop
    sw      k1, OFFSET_EPC(k0)
    #mfc0    t0,  #dont know where the pc is
    
.endm

.macro RESTORE_CONTEXT offset
    lw      k0, current_running
    addi    k0, k0, \offset
    #lw      $0, OFFSET_REG0(k0)
    lw      $1, OFFSET_REG1(k0)
    lw      $2, OFFSET_REG2(k0)
    lw      $3, OFFSET_REG3(k0)
    lw      $4, OFFSET_REG4(k0)
    lw      $5, OFFSET_REG5(k0)
    lw      $6, OFFSET_REG6(k0) 
    lw      $7, OFFSET_REG7(k0)
    lw      $8, OFFSET_REG8(k0)
    lw      $9, OFFSET_REG9(k0)
    lw      $10, OFFSET_REG10(k0)
    lw      $11, OFFSET_REG11(k0)
    lw      $12, OFFSET_REG12(k0)
    lw      $13, OFFSET_REG13(k0)
    lw      $14, OFFSET_REG14(k0)
    lw      $15, OFFSET_REG15(k0)
    lw      $16, OFFSET_REG16(k0)
    lw      $17, OFFSET_REG17(k0)
    lw      $18, OFFSET_REG18(k0)
    lw      $19, OFFSET_REG19(k0)
    lw      $20, OFFSET_REG20(k0)
    lw      $21, OFFSET_REG21(k0)
    lw      $22, OFFSET_REG22(k0)
    lw      $23, OFFSET_REG23(k0)
    lw      $24, OFFSET_REG24(k0)
    lw      $25, OFFSET_REG25(k0)
    #lw      $26, OFFSET_REG26(k0)
    #lw      $27, OFFSET_REG27(k0)
    lw      $28, OFFSET_REG28(k0)
    lw      $29, OFFSET_REG29(k0)
    lw      $30, OFFSET_REG30(k0)
    lw      $31, OFFSET_REG31(k0)

    lw      k1, OFFSET_STATUS(k0)
    mtc0    k1, CP0_STATUS
    nop
    lw      k1, OFFSET_HI(k0)
    mtc0    k1, CP0_TAGHI
    nop
    lw      k1, OFFSET_LO(k0)
    mtc0    k1, CP0_TAGLO
    nop
    lw      k1, OFFSET_BADVADDR(k0)
    mtc0    k1, CP0_BADVADDR
    nop
    lw      k1, OFFSET_CAUSE(k0)
    mtc0    k1, CP0_CAUSE
    nop
    lw      k1, OFFSET_EPC(k0)
    mtc0    k1, CP0_EPC
    nop
.endm

NESTED(do_scheduler, 0, ra)
    SAVE_CONTEXT(KERNEL)
    jal     scheduler
    RESTORE_CONTEXT(KERNEL)
    jr      ra
END(do_scheduler)

NESTED(do_scheduler_nosave, 0, ra)
    //CLI
    //SAVE_CONTEXT(USER)
    jal     scheduler
    nop
    li      a0, TIMER_INTERVAL
    jal     reset_timer
    nop
    RESTORE_CONTEXT(USER)
    //jal     epc_add_4
    //nop
    j       exception_is_done
    //STI
    //jr      ra
END(do_scheduler_nosave)

LEAF(epc_add_4)
    mfc0    k0, CP0_EPC
    nop
    addi    k0,k0,0x4
    mtc0    k0, CP0_EPC
    nop
    jr      ra
END(epc_add_4)

LEAF(reset_timer)
    mtc0    zero, CP0_COUNT
    nop
    mtc0    a0, CP0_COMPARE
    jr      ra
END(reset_timer)

LEAF(reset_cp0_status)
    li      k0, 0x10008000
    mtc0    k0, CP0_STATUS
    nop
    jr      ra 
END(reset_cp0_status)

LEAF(close_int)
    mfc0    k0, CP0_STATUS
    nop
    li      k1, (STATUS_CU0 | STATUS_IE)
    or      k0, k0, k1
    xori    k0, k0, STATUS_IE
    mtc0    k0, CP0_STATUS
    nop
    jr      ra 
END(close_int)

LEAF(start_int)
    mfc0    k0, CP0_STATUS
    nop
    li      k1, (STATUS_CU0 | STATUS_IE)
    or      k0, k0, k1
    mtc0    k0, CP0_STATUS
    nop
    jr      ra
END(start_int)

LEAF(get_cp0_status)
    mfc0    v0, CP0_STATUS
    nop
    jr      ra
END(get_cp0_status)

LEAF(set_cp0_status)
    mtc0    a0, CP0_STATUS
    nop
    jr      ra
END(set_cp0_status)

.global exception_handler_begin
.global exception_handler_end
.global int_clear_finish

NESTED(exception_handler_entry, 0, sp)   
exception_handler_begin:
    // TODO close interrupt
    // jmp exception_handler[i] which decided by CP0_CAUSE
    // Leve2 exception Handler.   
    CLI
    SAVE_CONTEXT(USER)
    
    mfc0    k0, CP0_CAUSE
    nop
    andi    k0, k0, CAUSE_EXCCODE
    la		k1, exception_handler
    add     k0, k0, k1
    lw      k0, 0(k0)
    j       k0
exception_handler_end:
END(exception_handler_entry)

LEAF(exception_is_done)
    RESTORE_CONTEXT(USER)
    STI
    eret
    nop
END(exception_is_done)

NESTED(handle_int, 0, sp)
    // interrupt handler
    // Leve3 exception Handler.

    mfc0    k0, CP0_CAUSE
    nop
    andi    k0, k0, CAUSE_IPL
    li      k1, 0x8000
    beq     k1, k0, time_interrupt
    nop
    j       int_clear_finish
time_interrupt:
    //lui     v0, 0xa080
    //addiu   a0,v0,11804
    //jal     0xa08024f4
    //nop
    la      k0, time_elapsed
    lw      k1, 0(k0)
    addi    k1, k1, 0x1
    sw      k1, 0(k0)
    la      ra, int_clear_finish

    li      k0, TIMER_INTERVAL
    mtc0    zero, CP0_COUNT
    nop
    mtc0    k0, CP0_COMPARE
    nop

    //jal     screen_reflush
    //nop
    jal     do_scheduler
    nop  
    j       int_clear_finish
END(handle_int)   

LEAF(int_clear_finish)
    
    //RESTORE_CONTEXT(USER)
    //mfc0    k0, CP0_CAUSE
    //nop
    //li      k1, 0xffff00ff
    //and     k0, k0, k1
    //mtc0    k0, CP0_CAUSE
    //nop
    j       exception_is_done
END(int_clear_finish)

NESTED(handle_syscall, 0, sp)
    // system call handler
    //lui     v0, 0xa080
    //addiu   a0,v0,11828
    //jal     0xa08024f4
    //nop
    //SAVE_CONTEXT(USER)

    move    a3, a2
    move    a2, a1
    move    a1, a0
    move    a0, v0

    jal     system_call_helper 
    nop
    //RESTORE_CONTEXT(USER)
    //mfc0    k0, CP0_CAUSE
    //nop
    //li      k1, 0xffff00ff
    //and     k0, k0, k1
    //mtc0    k0, CP0_CAUSE
    //nop
    j       exception_is_done
END(handle_syscall)

NESTED(handle_other, 0, sp)
    // other exception handler
    //lui     v0, 0xa080
    //addiu   a0,v0,11856
    //jal     0xa08024f4
    //nop
    j       exception_is_done
    nop
END(handle_other)

LEAF(none_handle)
    j       exception_is_done
    nop
END(none_handle)
